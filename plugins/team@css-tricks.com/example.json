{
    "sender": "bounce-mc.us2_3358554.1908558-88aa38dc99@mail51.atl11.rsgsv.net",
    "size": "91613",
    "recipient": "email2webhook@email2webhook.com",
    "content": {
        "to": [
            {
                "display": "frontender@email2webhook.com",
                "address": "frontender@email2webhook.com",
                "is_group": false
            }
        ],
        "from": [
            {
                "display": "Team CSS-Tricks",
                "address": "team@css-tricks.com",
                "is_group": false
            }
        ],
        "cc": [],
        "subject": "ðÂ [CSS-Tricks] 202: How to Improve Site Performance & Tricks for Using CSS variables",
        "body": "\n\nhttps://css-tricks.com/\n View this newsletter on the web. (https://css-tricks.com/newsletter/202-how-to-improve-site-performance-tricks-for-using-css-variables/)\n\n\n** Looking at inline CSS and performance\n------------------------------------------------------------\n\nIn this post, Timothy Vernon has a lot of smart things to say about taking your styles out of CSS file and moving them into the HTML (https://blog.logrocket.com/improve-site-performance-inlining-css/) for performance reasons:\n\nCSS is treated as a render-blocking resource â that is, if you include any form\nof in the documentâs , the browser will trigger an additional request to the server to retrieve that stylesheet before even beginning to render your page for the user.\n\nWhile our internet providers, infrastructure, and servers are all getting faster every year, there is no such thing as a free lunch. Every network request to the server has a time cost, and the requests required to complete before the browser begins rendering the page are the most expensive.\n\nThere are some trade-offs with this, as Timothy mentions. For example: now those styles are in your HTML, the download is certainly larger than before. It follows then makes to only serve the CSS thatâs being used on that page and thatâs commonly referred to as Critical CSS. Timothy mentions a few tools to help with that, such as Addy Osmaniâs Critical (https://github.com/addyosmani/critical) project.\n\n------------------------------------------------------------\n\n\n** Looking at performance through JavaScript bundling\n------------------------------------------------------------\n\nHereâs a fantastic post where Ivan Akulov digs into the popular writing app Notion (weâre big fans (https://css-tricks.com/video-screencasts/189-notion-for-personal-public-use/) ) and looks at why itâs particularly slow (https://3perf.com/blog/notion/) :\n\nIt turns out, almost every app has low-hanging fruits that could be implemented just by tuning the bundler configuration and doing a few precise code changes.\n\nIvan gives us some pointers for how we can make our own websites and apps faster with techniques such as deferring JavaScript execution, code splitting, and removing polyfills.\n------------------------------------------------------------\n\n\n** Global and Component Style Settings with CSS Variables\n------------------------------------------------------------\n\nSara Soueidan writes (https://www.sarasoueidan.com/blog/style-settings-with-css-variables/) :\n\nI want to share my favorite two ways to use CSS Variables to organize and maintain styles in my projects today.\n\nHeck yeah! Sara then walks us through how she built a whole library of accessible components called Skeleton:\n\nSara found that a lot of the styling properties between these components can be best maintained â and forked, then edited â with the help of CSS variables. This also allows her to quickly theme these components, too.\n------------------------------------------------------------\n\n\n** A/B Testing Instant.Page With Netlify and Speedcurve\n------------------------------------------------------------\n\ninstant.page (https://instant.page/) is a script that you add to your site so that when a user hovers over a link that page is preloaded, making the whole experience once they click it just a tiny bit faster. Tim Kadlec wanted to investigate the effects of this on his personal site though and so he set up an A/B test (https://timkadlec.com/remembers/2020-05-21-ab-testing-instant-page-with-netlify-and-speedcurve/) with the help of Netlify:\n\nNetlify supports branch-bases split testing, so first up was implementing instant.page on a separate branch. I downloaded the latest version so that I could self-host (thereâs no reason to incur the separate connection cost) and dropped it into my page on a separate branch (very creatively called âinstant-pageâ) and pushed to GitHub.\n\nAlso: the fact that itâs so easy to setup an A/B test with Netlify is thoroughly bonkers to me.\n\nStay tuned to Timâs blogâ¦ heâs got a follow up coming that looks at some reasons he was seeing what he was seeing, including some subtle bugs in how Netlify is doing things that might just get fixed up.\n------------------------------------------------------------\n\n\n** The Best Design System Tool is Slack\n------------------------------------------------------------\n\nI know this is a catchy title and whatnot â Iâm not trying to stir up drama â but itâs only because Iâve found that itâs best to meet folks where they are when working with design systems. Building lots of tools and writing lots of docs for componentsâ¦ All of this is useful, but 99% of the conversations about design systems happen in Slack anyway (https://css-tricks.com/the-best-design-system-tool-is-slack/) , so I wondered whether we could start to make those conversations easier to consolidate that information?\n\nAnd what happens if we add some of that documentation to Slack itself? I looked into our Slackbot settings and added colors from our design system so that, whenever someone types in color me, all of the colors are shown in that Slack Channel, like this:\n\nItâs pretty handy! And only takes a couple of minutes to set up, too. No one needs to head to Figma or a style guide â they can quickly type their request, then get back to work.\n------------------------------------------------------------\n\n\n** Updates to form styles have landed in Chrome 83\n------------------------------------------------------------\n\nHereâs some nifty updates to how forms look, but check out the ____________________ element Chrome 83 introduces. I struggled with that input on a recent project because I noticed Chrome didnât support it at all. Now it does, though, so hurrah!\n------------------------------------------------------------\n\n\n** Overlapping header with CSS Grid\n------------------------------------------------------------\n\nHereâs a smart post from Jonathan Snook about making the header in this design overlap the content with CSS grid (https://snook.ca/archives/html_and_css/overlapping-header-with-css-grid) :\n\nItâs a pretty neat trick and shows that now we donât have to do a lot of the weird layout magic hackery that we used to not so long ago.\n------------------------------------------------------------\n\n\n** Hereâs a post all about replicating Sass color functions in CSS\n------------------------------------------------------------\n\nJim Nielsen wanted to remove Sass dependency on a recent project and started experimenting with HSL to replace certain Sass functions (https://blog.jim-nielsen.com/2020/sass-color-functions-in-css/) , like saturate, desaturate, and darken:\n\nIâve felt quite happy as of late with no Sass in any of my personal projects. That said, I have always missed the color functions in Sass. I always loved those. Heck, I built a tool called SassMe which helps you visualize the output of Sass color functions in real time. All of this got me thinking: could you actually do an equivalent of something like Sassâ saturate() in CSS in 2020? Short answer: you can!\n\nAll of this riffs off of Lea Verouâs article called âA userâs guide to CSS variablesâ (https://increment.com/frontend/a-users-guide-to-css-variables/) which is worth every moment of your time. Thereâs just so much good stuff in there. But the section about color (https://increment.com/frontend/a-users-guide-to-css-variables/#creating-color-palettes) is especially interesting.\n------------------------------------------------------------\n\n\n** And, last but not least, hereâs how to make a close button\n------------------------------------------------------------\n\nThese types of buttons can be found everywhere on the web: in modals and overlays, on ads and video pop-ups. But! Making them with accessibility in mind should always be important. Manuel MatuzoviÄ breaks down all the patterns we need to avoid (https://www.htmhell.dev/20-close-buttons/) and the best practices we need to consider whilst making them.\n------------------------------------------------------------\nhttps://jetpack.com/upgrade/scan/?aff=8638\n\nSponsor\n\n\n** Jetpack Scan (https://jetpack.com/upgrade/scan/?aff=8638)\n------------------------------------------------------------\n\nThe Jetpack team at Automattic is on a roll when it comes to pumping out big new features! First, we saw support for recurring payments (https://wordpress.com/blog/2019/11/12/recurring-payments/?aff=8638) . Then we saw a huge update to the search feature (https://jetpack.com/support/search/?aff=8638) that introduced instant results (https://css-tricks.com/jetpack-instant-search/) . Now, we get Jetpack Scan (https://jetpack.com/upgrade/scan/?aff=8638) , a premium site security service that doesnât just monitor security and notify you when issues pop up â it will even fix those issues for you. Check it out (https://jetpack.com/upgrade/scan/?aff=8638) , give it a try, and sleep better at night knowing your site is secure.\n\nGet started today â (https://jetpack.com/upgrade/scan/?aff=8638)\n------------------------------------------------------------\n\n\n** Have you seen Lynn Fisherâs amazing thread (https://twitter.com/lynnandtonic/status/1084880013436936192) of CSS memes?\n------------------------------------------------------------\n\nI love how positivity focused there are. Rather than pooping on CSS being confusing or hard, they are focused on CSS killinâ it.\n\nGIFs are the only thing that will work in email, and they are huge, so Iâll just do one:\n\nBut donât miss the ones on flex-direction: column; (https://twitter.com/lynnandtonic/status/1092833341693321217) , adjacent sibling combinators (https://twitter.com/lynnandtonic/status/1265688689235177475) , or border-radius: 50%; (https://twitter.com/lynnandtonic/status/1105543506594979840) .\n\nUntil next time!\nhttps://css-tricks.com/\n\n============================================================\nWant to change how you receive these emails?\nYou can ** update your preferences (https://css-tricks.us2.list-manage.com/profile?u=155f5a9ccc4e24c318130cace&id=197f127a68&e=88aa38dc99)\nor ** unsubscribe from this list (https://css-tricks.us2.list-manage.com/unsubscribe?u=155f5a9ccc4e24c318130cace&id=197f127a68&e=88aa38dc99&c=5c03a47cc3)\n.",
        "headers": {
            "received-spf": "Pass (mailfrom) identity=mailfrom; client-ip=205.201.133.51; helo=mail51.atl11.rsgsv.net; envelope-from=bounce-mc.us2_3358554.1908558-88aa38dc99@mail51.atl11.rsgsv.net; receiver=<UNKNOWN> ",
            "authentication-results": "email2webhook.com; dkim=pass (1024-bit key; unprotected) header.d=mailchimpapp.net header.i=team=css-tricks.com@mailchimpapp.net header.b=\"dk9taT7H\"; dkim-atps=neutral",
            "received": [
                "from mail51.atl11.rsgsv.net (mail51.atl11.rsgsv.net [205.201.133.51]) by email2webhook.com (Postfix) with ESMTPS id D372E403E0 for <frontender@email2webhook.com>; Tue,  9 Jun 2020 04:32:45 +0530 (IST)",
                "from localhost (localhost [127.0.0.1]) by mail51.atl11.rsgsv.net (Mailchimp) with ESMTP id 49gpgG2m3vz35kyns for <frontender@email2webhook.com>; Mon,  8 Jun 2020 23:02:34 +0000 (GMT)"
            ],
            "dkim-signature": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=mailchimpapp.net; s=k1; t=1591657354; i=team=3Dcss-tricks.com@mailchimpapp.net; bh=4uqxLbKZ/7ezHqufRlIsDBvGRHPz4Gin3SN0wIFKjpI=; h=Subject:From:Reply-To:To:Date:Message-ID:List-ID:List-Unsubscribe:  Content-Type:MIME-Version; b=dk9taT7HaL+DKlI/iaZetsxkRMF+UYE86pL8rFA1aQNfDxHa5yQob4VNXN5mmGk8M  vhaW2cfAj37/fhUUAzixhnzCJq/F9YT00vaKHjLtdPC1xvqh/3zY/nTHTaTYnpGeR8  dT4oU4njx+dSwPZIlu599srNOaixEEga8l4NUTGI=",
            "subject": "ðÂ [CSS-Tricks] 202: How to Improve Site Performance & Tricks for Using CSS variables",
            "from": "Team CSS-Tricks <team@css-tricks.com>",
            "reply-to": "Team CSS-Tricks <team@css-tricks.com>",
            "to": "<frontender@email2webhook.com>",
            "date": "Mon,  8 Jun 2020 23:02:29 +0000",
            "message-id": "<155f5a9ccc4e24c318130cace.88aa38dc99.20200608230218.5c03a47cc3.93bc9c5e@mail51.atl11.rsgsv.net>",
            "x-mailer": "MailChimp Mailer - **CID5c03a47cc388aa38dc99**",
            "x-campaign": "mailchimp155f5a9ccc4e24c318130cace.5c03a47cc3",
            "x-campaignid": "mailchimp155f5a9ccc4e24c318130cace.5c03a47cc3",
            "x-report-abuse": "Please report abuse for this campaign here: https://mailchimp.com/contact/abuse/?u=155f5a9ccc4e24c318130cace&id=5c03a47cc3&e=88aa38dc99",
            "x-mc-user": "155f5a9ccc4e24c318130cace",
            "feedback-id": "3358554:3358554.1908558:us2:mc",
            "list-id": "155f5a9ccc4e24c318130cacemc list <155f5a9ccc4e24c318130cace.740661.list-id.mcsv.net>",
            "x-accounttype": "pd",
            "list-unsubscribe": "<https://css-tricks.us2.list-manage.com/unsubscribe?u=155f5a9ccc4e24c318130cace&id=197f127a68&e=88aa38dc99&c=5c03a47cc3>, <mailto:unsubscribe-mc.us2_155f5a9ccc4e24c318130cace.5c03a47cc3-88aa38dc99@mailin.mcsv.net?subject=unsubscribe>",
            "list-unsubscribe-post": "List-Unsubscribe=One-Click",
            "content-type": "multipart/alternative; boundary=\"_----------=_MCPart_2007641126\"",
            "mime-version": "1.0"
        }
    }
}
